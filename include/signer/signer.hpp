#pragma once

#include <future>
#include <memory>
#include <optional>
#include <string>
#include <vector>

#include "data/data.hpp"

namespace nostr
{
namespace signer
{
enum class Encryption
{
    NIP04,
    NIP44
};

/**
 * @brief An interface for Nostr event signing that implements NIP-46.
 */
class ISigner
{
public:
    virtual ~ISigner() = default;

    /**
     * @brief Signs the given Nostr event.
     * @param event The event to sign.
     * @returns A promise that will be fulfilled when the event has been signed.  It will be
     * fulfilled with `true` if the signing succeeded, and `false` if it failed.
     * @remark The event's `sig` field will be updated in-place with the signature.
     */
    virtual std::shared_ptr<std::promise<bool>> sign(
        std::shared_ptr<nostr::data::Event> event
    ) = 0;
};

class INostrConnectSigner : public ISigner
{
public:
    virtual ~INostrConnectSigner() = default;

    /**
     * @brief Establishes a connection to a remote signer using a connection token generated by the
     * signer.
     * @param connectionToken A connection token string beginning with `bunker://`, as defined by
     * NIP-46.
     * @remark A typical use case for this method would be for the user to paste a signer-generated
     * connection token into a client application, which would then call this method to establish a
     * connection to the remote signer.
     */
    virtual void receiveConnectionToken(std::string connectionToken) = 0;

    /**
     * @brief Generates a connection token that a remote signer may use to establish a connection
     * to the client.
     * @param relays A list of one or more relays the client will use to communicate with the
     * remote signer.
     * @param secret An arbitrary value that the remote signer must return when connecting to
     * validate its identity to the client.
     * @param name The name of the client application.
     * @param url The canonical URL of the client application.
     * @param description A description of the client application.
     * @returns A connection token string beginning with `nostrconnect://`, as specified by NIP-46,
     * that may be provided to a remote signer to establish a connection to the client.  Returns an
     * empty string if the connection token generation fails.
     */
    virtual std::string generateConnectionToken(
        std::vector<std::string> relays,
        std::string secret,
        std::optional<std::string> name,
        std::optional<std::string> url,
        std::optional<std::string> description
    ) = 0;

    /**
     * @brief Pings the remote signer to check if it is still connected.
     * @returns A promise that will be fulfilled with `true` if the remote signer is connected, and
     * `false` otherwise.
     */
    virtual std::promise<bool> ping() = 0;
};
} // namespace signer
} // namespace nostr
